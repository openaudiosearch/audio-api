// tslint:disable
// @ts-nocheck
/**
 * PodcastIndex.org API
 *
 * OpenAPI spec version: 1.4.0
 * Contact: info@podcastindex.org
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */


/**
 * Destination for \"Value for Value\" payment. 
 * @export
 * @interface DestinationV4v
 */
export interface DestinationV4v {
    name: string;
    address: string;
    type: TypeDestination;
    split: number;
    fee: boolean;
}

/**
 * Episode data 
 * @export
 * @interface EpisodeObject
 */
export interface EpisodeObject {
    id: number;
    title: string;
    link: string;
    description: string;
    guid: string;
    datePublished: number;
    datePublishedPretty: string;
    dateCrawled: number;
    enclosureUrl: string;
    enclosureType: string;
    enclosureLength: number;
    duration: number;
    explicit: Explicit;
    episode: number;
    episodeType: EpisodeType;
    season: number;
    image: string;
    feedItunesId: number;
    feedImage: string;
    feedId: number;
    feedTitle: string;
    feedLanguage: string;
    chaptersUrl: string;
    transcriptUrl: string;
    soundbite: Soundbite;
    soundbites: Array<Soundbite>;
}

/**
 * The type of episode 
 * @export
 * @enum {string}
 */
export const EpisodeType = {
    Full:'full',
    Trailer:'trailer',
    Bonus:'bonus',
} as const

export type EpisodeType = typeof EpisodeType[keyof typeof EpisodeType]

/**
 * Indicates if feed already exists in the index 
 * @export
 * @enum {string}
 */
export const Existed = {
    True:'true',
    False:'false',
} as const

export type Existed = typeof Existed[keyof typeof Existed]

/**
 * Is episode marked as explicit    - 0: not marked explicit   - 1: marked explicit 
 * @export
 * @enum {string}
 */
export const Explicit = {
    NUMBER_0:0,
    NUMBER_1:1,
} as const

export type Explicit = typeof Explicit[keyof typeof Explicit]

/**
 * 
 * @export
 * @interface FeedBytag
 */
export interface FeedBytag {
    id: number;
    title: string;
    url: string;
    originalUrl: string;
    link: string;
    description: string;
    author: string;
    ownerName: string;
    image: string;
    artwork: string;
    lastUpdateTime: number;
    lastCrawlTime: number;
    lastParseTime: number;
    lastGoodHttpStatusTime: number;
    lastHttpStatus: number;
    contentType: string;
    itunesId: number;
    generator: string;
    language: string;
    type: Type;
    dead: number;
    crawlErrors: number;
    parseErrors: number;
    categories: object;
    locked: Locked;
    imageUrlHash: number;
    value: Value;
    funding: Funding;
}

/**
 * 
 * @export
 * @interface FeedDead
 */
export interface FeedDead {
    id: number;
    url: string;
}

/**
 * Known details of podcast feed 
 * @export
 * @interface FeedItunes
 */
export interface FeedItunes {
    id: number;
    title: string;
    url: string;
    originalUrl: string;
    link: string;
    description: string;
    author: string;
    ownerName: string;
    image: string;
    artwork: string;
    lastUpdateTime: number;
    lastCrawlTime: number;
    lastParseTime: number;
    lastGoodHttpStatusTime: number;
    lastHttpStatus: number;
    contentType: string;
    itunesId: number;
    generator: string;
    language: string;
    type: Type;
    dead: number;
    crawlErrors: number;
    parseErrors: number;
    locked: Locked;
}

/**
 * Known details of podcast feed 
 * @export
 * @interface FeedPodcast
 */
export interface FeedPodcast {
    id: number;
    title: string;
    url: string;
    originalUrl: string;
    link: string;
    description: string;
    author: string;
    ownerName: string;
    image: string;
    artwork: string;
    lastUpdateTime: number;
    lastCrawlTime: number;
    lastParseTime: number;
    lastGoodHttpStatusTime: number;
    lastHttpStatus: number;
    contentType: string;
    itunesId: number;
    generator: string;
    language: string;
    type: Type;
    dead: number;
    chash: string;
    episodeCount: number;
    crawlErrors: number;
    parseErrors: number;
    categories: object;
    locked: Locked;
    imageUrlHash: number;
    value: Value;
    funding: Funding;
}

/**
 * 
 * @export
 * @interface FeedSearch
 */
export interface FeedSearch {
    id: number;
    title: string;
    url: string;
    originalUrl: string;
    link: string;
    description: string;
    author: string;
    ownerName: string;
    image: string;
    artwork: string;
    lastUpdateTime: number;
    lastCrawlTime: number;
    lastParseTime: number;
    lastGoodHttpStatusTime: number;
    lastHttpStatus: number;
    contentType: string;
    itunesId: number;
    generator: string;
    language: string;
    type: Type;
    dead: number;
    crawlErrors: number;
    parseErrors: number;
    categories: object;
    locked: Locked;
    imageUrlHash: number;
}

/**
 * 
 * @export
 * @interface FeedTrending
 */
export interface FeedTrending {
    id: number;
    url: string;
    title: string;
    author: string;
    image: string;
    newestItemPublishedTime: number;
    itunesId: number;
    trendScore: number;
    language: string;
    categories: object;
}

/**
 * Information for donation/funding the podcast.  See the [podcast namespace spec](https://podcastindex.org/namespace/1.0#funding) for more information. 
 * @export
 * @interface Funding
 */
export interface Funding {
    url: string;
    message: string;
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    status: Status;
    feeds: Array<FeedSearch>;
    count: number;
    query: string;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    status: Status;
    items: Array<ItemSearchByperson>;
    count: number;
    query: string;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    status: Status;
    items: Array<ItemPodcast>;
    count: number;
    query: string;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    status: Status;
    id: number;
    episode: EpisodeObject;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    status: Status;
    episodes: Array<ItemPodcastRandom>;
    count: number;
    max: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    status: Status;
    items: Array<ItemPodcastRecent>;
    count: number;
    max: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    status: Status;
    feeds: Array<object>;
    count: number;
    max: number;
    since: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    status: Status;
    feeds: Array<object>;
    count: number;
    max: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    status: Status;
    items: Array<object>;
    count: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    status: Status;
    query: QueryId;
    value: Value;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    status: Status;
    query: QueryUrl;
    value: Value;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    status: Status;
    stats: Stats;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    status: Status;
    query: QueryId;
    feed: FeedPodcast;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    status: Status;
    feedId: number;
    existed: Existed;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    status: Status;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    status: Status;
    query: QueryUrl;
    feed: FeedPodcast;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    status: Status;
    query: QueryId;
    feed: FeedItunes;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    status: Status;
    feeds: Array<FeedBytag>;
    count: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    status: Status;
    feeds: Array<FeedTrending>;
    count: number;
    max: number;
    since: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    status: Status;
    feeds: Array<FeedDead>;
    count: number;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    status: Status;
    items: Array<ItemPodcast>;
    count: number;
    query: string | Array;
    description: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    status: Status;
    items: Array<ItemPodcast>;
    count: number;
    query: QueryUrl;
    description: string;
}

/**
 * 
 * @export
 * @interface ItemPodcast
 */
export interface ItemPodcast {
    id: number;
    title: string;
    link: string;
    description: string;
    guid: string;
    datePublished: number;
    datePublishedPretty: string;
    dateCrawled: number;
    enclosureUrl: string;
    enclosureType: string;
    enclosureLength: number;
    duration: number;
    explicit: Explicit;
    episode: number;
    episodeType: EpisodeType;
    season: number;
    image: string;
    feedItunesId: number;
    feedImage: string;
    feedId: number;
    feedLanguage: string;
    chaptersUrl: string;
    transcriptUrl: string;
    soundbite: Soundbite;
    soundbites: Array<Soundbite>;
}

/**
 * 
 * @export
 * @interface ItemPodcastRandom
 */
export interface ItemPodcastRandom {
    id: number;
    title: string;
    link: string;
    description: string;
    guid: string;
    datePublished: number;
    datePublishedPretty: string;
    dateCrawled: number;
    enclosureUrl: string;
    enclosureType: string;
    enclosureLength: number;
    explicit: Explicit;
    episode: number;
    episodeType: EpisodeType;
    season: number;
    image: string;
    feedItunesId: number;
    feedImage: string;
    feedId: number;
    feedTitle: string;
    feedLanguage: string;
    categories: object;
    chaptersUrl: string;
}

/**
 * 
 * @export
 * @interface ItemPodcastRecent
 */
export interface ItemPodcastRecent {
    id: number;
    title: string;
    link: string;
    description: string;
    guid: string;
    datePublished: number;
    datePublishedPretty: string;
    dateCrawled: number;
    enclosureUrl: string;
    enclosureType: string;
    enclosureLength: number;
    explicit: Explicit;
    episode: number;
    episodeType: EpisodeType;
    season: number;
    image: string;
    feedItunesId: number;
    feedImage: string;
    feedId: number;
    feedTitle: string;
    feedLanguage: string;
}

/**
 * 
 * @export
 * @interface ItemSearchByperson
 */
export interface ItemSearchByperson {
    id: number;
    title: string;
    link: string;
    description: string;
    guid: string;
    datePublished: number;
    dateCrawled: number;
    enclosureUrl: string;
    enclosureType: string;
    enclosureLength: number;
    duration: number;
    explicit: Explicit;
    episode: number;
    episodeType: EpisodeType;
    season: number;
    image: string;
    feedItunesId: number;
    feedImage: string;
    feedId: number;
    feedUrl: string;
    feedAuthor: string;
    feedTitle: string;
    feedLanguage: string;
    chaptersUrl: string;
    transcriptUrl: string;
}

/**
 * Tell other podcast platforms whether they are allowed to import this feed. A value of 1 means that any attempt to import this feed into a new platform should be rejected. Contains the value of the feed\'s channel-level `podcast:locked` tag where:    - 0: \'no\'   - 1: \'yes\' 
 * @export
 * @enum {string}
 */
export const Locked = {
    NUMBER_0:0,
    NUMBER_1:1,
} as const

export type Locked = typeof Locked[keyof typeof Locked]

/**
 * Description of the method for providing \"Value for Value\" payments 
 * @export
 * @interface ModelV4v
 */
export interface ModelV4v {
    type: TypeV4v;
    method: string;
    suggested: string;
}

/**
 * Object containing the input query data 
 * @export
 * @interface QueryId
 */
export interface QueryId {
    id: string;
}

/**
 * Object containing the input query data 
 * @export
 * @interface QueryUrl
 */
export interface QueryUrl {
    url: string;
}

/**
 * Soundbite for episode 
 * @export
 * @interface Soundbite
 */
export interface Soundbite {
    startTime: number;
    duration: number;
    title: string;
}

/**
 * An array statistic properties 
 * @export
 * @interface Stats
 */
export interface Stats {
    feedCountTotal: number;
    episodeCountTotal: number;
    feedsWithNewEpisodes3days: number;
    feedsWithNewEpisodes10days: number;
    feedsWithNewEpisodes30days: number;
    feedsWithNewEpisodes90days: number;
}

/**
 * Indicates API request status 
 * @export
 * @enum {string}
 */
export const Status = {
    True:'true',
    False:'false',
} as const

export type Status = typeof Status[keyof typeof Status]

/**
 * Status of feed after being added to index 
 * @export
 * @enum {string}
 */
export const StatusFeed = {
    Unconfirmed:'unconfirmed',
    Confirmed:'confirmed',
} as const

export type StatusFeed = typeof StatusFeed[keyof typeof StatusFeed]

/**
 * Type of source feed where:    - 0: RSS   - 1: Atom 
 * @export
 * @enum {string}
 */
export const Type = {
    NUMBER_0:0,
    NUMBER_1:1,
} as const

export type Type = typeof Type[keyof typeof Type]

/**
 * Type of destination 
 * @export
 * @enum {string}
 */
export const TypeDestination = {
    Node:'node',
} as const

export type TypeDestination = typeof TypeDestination[keyof typeof TypeDestination]

/**
 * Payment type 
 * @export
 * @enum {string}
 */
export const TypeV4v = {
    Lightning:'lightning',
    Hive:'hive',
    Webmonetization:'webmonetization',
} as const

export type TypeV4v = typeof TypeV4v[keyof typeof TypeV4v]

/**
 * Information for supporting the podcast via one of the \"Value for Value\" methods.  Examples:   - `lightning` value type: https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=169991&pretty   - `webmonetization` value type: https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=779873&pretty 
 * @export
 * @interface Value
 */
export interface Value {
    model: ModelV4v;
    destinations: Array<DestinationV4v>;
}







